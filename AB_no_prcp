{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1_IyHlyvlqI3MNgvZY4pB316N6oAHsOBP","authorship_tag":"ABX9TyOOPasqw/LzpAeC5A144eq7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"onEgp3t6ogXq","executionInfo":{"status":"ok","timestamp":1725446789738,"user_tz":-330,"elapsed":2283,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","data=pd.read_csv(\"/content/drive/MyDrive/AI ML IITM saasthra/AB_noPRCP.csv\")\n","test_data=pd.read_csv(\"/content/drive/MyDrive/AI ML IITM saasthra/AB_noPRCP_test.csv\")"]},{"cell_type":"code","source":["data.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZpaT8olzpJMI","executionInfo":{"status":"ok","timestamp":1725446795087,"user_tz":-330,"elapsed":799,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"b136ac28-c17b-4d80-92e1-df8337075243"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['DATE', 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'tmax_A', 'tmin_A',\n","       'Tavg_A', 'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'tmax_b',\n","       'tmin_b', 'Tavg_B', 'LONGITUDE', 'LATITUDE', 'TAVG', 'ELEVATION'],\n","      dtype='object')"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["test_data.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gaQj795ppK49","executionInfo":{"status":"ok","timestamp":1725446802692,"user_tz":-330,"elapsed":5,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"9c47fdcf-0ded-4d10-e6af-99037d6d6973"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['DATE', 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'tmax_A', 'tmin_A',\n","       'Tavg_A', 'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'tmax_b',\n","       'tmin_b', 'Tavg_B', 'LONGITUDE', 'LATITUDE', 'ELEVATION'],\n","      dtype='object')"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_absolute_error\n","X = data[[ 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'tmax_A', 'tmin_A',\n","       'Tavg_A', 'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'tmax_b',\n","       'tmin_b', 'Tavg_B', 'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","y = data['TAVG']\n","X_test = test_data[['LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'tmax_A', 'tmin_A',\n","       'Tavg_A', 'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'tmax_b',\n","       'tmin_b', 'Tavg_B', 'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","\n","# Split data for training and validation\n","X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Standardize features\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_val_scaled = scaler.transform(X_val)\n","X_test_scaled = scaler.transform(X_test)"],"metadata":{"id":"sRCrnnyepNJG","executionInfo":{"status":"ok","timestamp":1725446944765,"user_tz":-330,"elapsed":1790,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["Linear Regression"],"metadata":{"id":"SbKn_Hs5pwI6"}},{"cell_type":"code","source":["# Initialize and train the model\n","lr = LinearRegression()\n","lr.fit(X_train_scaled, y_train)\n","\n","# Predict on validation and test datasets\n","y_val_pred = lr.predict(X_val_scaled)\n","y_test_pred = lr.predict(X_test_scaled)\n","\n","# Calculate MAE\n","mae_lr = mean_absolute_error(y_val, y_val_pred)\n","print(f\"Linear Regression Mean Absolute Error: {mae_lr}\")\n","\n","# Prepare results for test data\n","test_data['Predicted_TAVG'] = y_test_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RaAdjTPKpzVZ","executionInfo":{"status":"ok","timestamp":1725446973791,"user_tz":-330,"elapsed":582,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"16c92681-804e-4e2f-aa50-1a66aeb472a5"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Linear Regression Mean Absolute Error: 3.456133714471966\n"]}]},{"cell_type":"code","source":["y_test_pred_rounded = [round(pred, 1) for pred in y_test_pred]\n","\n","# Save predictions to CSV\n","predictions = pd.DataFrame({\n","    'INDEX': range(len(y_test_pred_rounded)),\n","    'TAVG': y_test_pred_rounded\n","})\n","\n","predictions.to_csv('/content/drive/MyDrive/AIML PREDICTIONS/AB_noPRCP_test_predictions_lr.csv', index=False)"],"metadata":{"id":"8h7vNaRZp2kG","executionInfo":{"status":"ok","timestamp":1725447024716,"user_tz":-330,"elapsed":758,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":["Support Vector Machine"],"metadata":{"id":"FJI79XdFqohS"}},{"cell_type":"code","source":["from sklearn.svm import SVR\n","from sklearn.metrics import mean_absolute_error\n","import pandas as pd\n","\n","# Initialize and train the SVR model\n","svr = SVR()\n","svr.fit(X_train_scaled, y_train)\n","\n","# Predict on validation and test datasets\n","y_val_pred_svr = svr.predict(X_val_scaled)\n","y_test_pred_svr = svr.predict(X_test_scaled)\n","\n","# Calculate MAE\n","mae_svr = mean_absolute_error(y_val, y_val_pred_svr)\n","print(f\"Support Vector Machine Mean Absolute Error: {mae_svr}\")\n","\n","# Round predictions to one decimal place\n","y_test_pred_svr_rounded = [round(pred, 1) for pred in y_test_pred_svr]\n","\n","# Prepare results for test data\n","predictions = pd.DataFrame({\n","    'INDEX': range(len(y_test_pred_svr_rounded)),\n","    'TAVG': y_test_pred_svr_rounded\n","})\n","\n","# Save predictions to CSV\n","predictions.to_csv('/content/drive/MyDrive/AIML PREDICTIONS/AB_noPRCP_test_predictions_svr.csv', index=False)\n"],"metadata":{"id":"LtLQvx6Uea04","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725447217663,"user_tz":-330,"elapsed":541,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"643b1643-4454-4d28-923f-cd67e00d78f6"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Support Vector Machine Mean Absolute Error: 2.9106598301734854\n"]}]},{"cell_type":"markdown","source":["K nearest Neighbours"],"metadata":{"id":"tGsMLG5Jq2EL"}},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.metrics import mean_absolute_error\n","import pandas as pd\n","\n","# Initialize and train the KNN model\n","knn = KNeighborsRegressor()\n","knn.fit(X_train_scaled, y_train)\n","\n","# Predict on validation and test datasets\n","y_val_pred_knn = knn.predict(X_val_scaled)\n","y_test_pred_knn = knn.predict(X_test_scaled)\n","\n","# Calculate MAE for validation data\n","mae_knn = mean_absolute_error(y_val, y_val_pred_knn)\n","print(f\"K-Nearest Neighbors Mean Absolute Error: {mae_knn}\")\n","\n","# Round predictions to one decimal place\n","y_test_pred_knn_rounded = [round(pred, 1) for pred in y_test_pred_knn]\n","\n","# Prepare results for test data\n","predictions = pd.DataFrame({\n","    'INDEX': range(len(y_test_pred_knn_rounded)),\n","    'TAVG': y_test_pred_knn_rounded\n","})\n","\n","# Save predictions to CSV\n","predictions.to_csv('/content/drive/MyDrive/AIML PREDICTIONS/AB_noPRCP_test_predictions_knn.csv', index=False)\n","\n"],"metadata":{"id":"JKbWTXNAefkZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725447249128,"user_tz":-330,"elapsed":5,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"bb334785-c1a0-40eb-f791-1832be24a21f"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["K-Nearest Neighbors Mean Absolute Error: 2.31239263803681\n"]}]},{"cell_type":"markdown","source":["Dt"],"metadata":{"id":"UNWeW1MJq9TU"}},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeRegressor\n","from sklearn.metrics import mean_absolute_error\n","import pandas as pd\n","\n","# Initialize and train the Decision Tree model\n","dt = DecisionTreeRegressor()\n","dt.fit(X_train_scaled, y_train)\n","\n","# Predict on validation and test datasets\n","y_val_pred_dt = dt.predict(X_val_scaled)\n","y_test_pred_dt = dt.predict(X_test_scaled)\n","\n","# Calculate MAE for validation data\n","mae_dt = mean_absolute_error(y_val, y_val_pred_dt)\n","print(f\"Decision Tree Mean Absolute Error: {mae_dt}\")\n","\n","# Round predictions to one decimal place\n","y_test_pred_dt_rounded = [round(pred, 1) for pred in y_test_pred_dt]\n","\n","# Prepare results for test data\n","predictions = pd.DataFrame({\n","    'INDEX': range(len(y_test_pred_dt_rounded)),\n","    'TAVG': y_test_pred_dt_rounded\n","})\n","\n","# Save predictions to CSV\n","predictions.to_csv('/content/drive/MyDrive/AIML PREDICTIONS/A_noPRCP_test_predictions_dt.csv', index=False)\n"],"metadata":{"id":"yjvKFjOTenG_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725447287075,"user_tz":-330,"elapsed":654,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"b121f0d4-c2f4-40b9-9f37-a6a35c6289dd"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree Mean Absolute Error: 3.056441717791411\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"I7HnorJ7rEvY"}},{"cell_type":"markdown","source":["Gradient Boosting"],"metadata":{"id":"n2fdTRherE8c"}},{"cell_type":"code","source":[],"metadata":{"id":"hKIxUA6JrDOZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.metrics import mean_absolute_error\n","import pandas as pd\n","\n","# Initialize and train the Gradient Boosting model\n","model = GradientBoostingRegressor()\n","model.fit(X_train_scaled, y_train)\n","\n","# Predict on validation data\n","y_val_pred = model.predict(X_val_scaled)\n","mae_val = mean_absolute_error(y_val, y_val_pred)\n","print(f\"Gradient Boosting Model Mean Absolute Error on Validation Set: {mae_val}\")\n","\n","# Predict on test data\n","y_test_pred = model.predict(X_test_scaled)\n","\n","# Round predictions to one decimal place\n","y_test_pred_rounded = [round(pred, 1) for pred in y_test_pred]\n","\n","# Prepare results for test data\n","predictions = pd.DataFrame({\n","    'INDEX': range(len(y_test_pred_rounded)),\n","    'TAVG': y_test_pred_rounded\n","})\n","\n","# Save predictions to CSV\n","predictions.to_csv('/content/drive/MyDrive/AIML PREDICTIONS/A_noPRCP_test_predictions_gb.csv', index=False)\n","\n"],"metadata":{"id":"lpKuNku2fOaG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725447315753,"user_tz":-330,"elapsed":1239,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"3d8b4a86-a215-46e4-9c00-aa5e9c53d6cc"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Gradient Boosting Model Mean Absolute Error on Validation Set: 2.219519030350436\n"]}]}]}