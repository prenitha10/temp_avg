{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1XuChSHPtwxZaQXJk7sQShHVJ89KzaOdJ","authorship_tag":"ABX9TyMO8Fe52tDfEps6gs4DxL2T"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"nF3kXqEoQYe2","executionInfo":{"status":"ok","timestamp":1725290996723,"user_tz":-330,"elapsed":1590,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":["df= pd.read_csv(\"/content/drive/MyDrive/AI ML IITM saasthra/test.csv\")"],"metadata":{"id":"ZKuckoQCQgLm","executionInfo":{"status":"ok","timestamp":1725290997991,"user_tz":-330,"elapsed":27,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"id":"lh95-mYBQjaw","executionInfo":{"status":"ok","timestamp":1725290997991,"user_tz":-330,"elapsed":25,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"dfe936c3-0ebe-46bc-c330-24ca328f7e26"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   INDEX        DATE  LATITUDE_A  LONGITUDE_A  ELEVATION_A  PRCP_A  SNWD_A  \\\n","0      0  04-11-1978      63.883       77.517          128     0.0     0.0   \n","1      1  11-04-1980      63.883       77.517          128     NaN     0.0   \n","2      2  29-04-1977      63.883       77.517          128     NaN     0.0   \n","3      3  12-10-1977      63.883       77.517          128     0.0     0.0   \n","4      4  02-09-1980      63.883       77.517          128     NaN     0.0   \n","\n","   TMAX_A  TMIN_A  TAVG_A  ...  LATITUDE_C  LONGITUDE_C  ELEVATION_C  PRCP_C  \\\n","0     5.0     NaN     2.3  ...      63.083       78.933           64     NaN   \n","1     NaN     NaN     9.3  ...      63.083       78.933           64     0.0   \n","2     NaN     NaN    18.0  ...      63.083       78.933           64     0.0   \n","3    16.0     NaN     9.8  ...      63.083       78.933           64     0.0   \n","4    29.0    10.0    18.8  ...      63.083       78.933           64   500.0   \n","\n","   SNWD_C  TMAX_C  TMIN_C  TAVG_C  LATITUDE  LONGITUDE  \n","0    0.00     8.0     NaN     3.0    63.933     78.733  \n","1    0.00    28.0     8.0    15.0    63.933     78.733  \n","2    2.89    30.0     NaN    15.8    63.933     78.733  \n","3    0.00    19.0     NaN    12.4    63.933     78.733  \n","4    0.00    30.0     NaN    21.4    63.933     78.733  \n","\n","[5 rows x 28 columns]"],"text/html":["\n","  <div id=\"df-de561358-dfdb-4129-a87d-f84518b5359d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>INDEX</th>\n","      <th>DATE</th>\n","      <th>LATITUDE_A</th>\n","      <th>LONGITUDE_A</th>\n","      <th>ELEVATION_A</th>\n","      <th>PRCP_A</th>\n","      <th>SNWD_A</th>\n","      <th>TMAX_A</th>\n","      <th>TMIN_A</th>\n","      <th>TAVG_A</th>\n","      <th>...</th>\n","      <th>LATITUDE_C</th>\n","      <th>LONGITUDE_C</th>\n","      <th>ELEVATION_C</th>\n","      <th>PRCP_C</th>\n","      <th>SNWD_C</th>\n","      <th>TMAX_C</th>\n","      <th>TMIN_C</th>\n","      <th>TAVG_C</th>\n","      <th>LATITUDE</th>\n","      <th>LONGITUDE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>04-11-1978</td>\n","      <td>63.883</td>\n","      <td>77.517</td>\n","      <td>128</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","      <td>NaN</td>\n","      <td>2.3</td>\n","      <td>...</td>\n","      <td>63.083</td>\n","      <td>78.933</td>\n","      <td>64</td>\n","      <td>NaN</td>\n","      <td>0.00</td>\n","      <td>8.0</td>\n","      <td>NaN</td>\n","      <td>3.0</td>\n","      <td>63.933</td>\n","      <td>78.733</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>11-04-1980</td>\n","      <td>63.883</td>\n","      <td>77.517</td>\n","      <td>128</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>9.3</td>\n","      <td>...</td>\n","      <td>63.083</td>\n","      <td>78.933</td>\n","      <td>64</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>28.0</td>\n","      <td>8.0</td>\n","      <td>15.0</td>\n","      <td>63.933</td>\n","      <td>78.733</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>29-04-1977</td>\n","      <td>63.883</td>\n","      <td>77.517</td>\n","      <td>128</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>18.0</td>\n","      <td>...</td>\n","      <td>63.083</td>\n","      <td>78.933</td>\n","      <td>64</td>\n","      <td>0.0</td>\n","      <td>2.89</td>\n","      <td>30.0</td>\n","      <td>NaN</td>\n","      <td>15.8</td>\n","      <td>63.933</td>\n","      <td>78.733</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>12-10-1977</td>\n","      <td>63.883</td>\n","      <td>77.517</td>\n","      <td>128</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>16.0</td>\n","      <td>NaN</td>\n","      <td>9.8</td>\n","      <td>...</td>\n","      <td>63.083</td>\n","      <td>78.933</td>\n","      <td>64</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>19.0</td>\n","      <td>NaN</td>\n","      <td>12.4</td>\n","      <td>63.933</td>\n","      <td>78.733</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>02-09-1980</td>\n","      <td>63.883</td>\n","      <td>77.517</td>\n","      <td>128</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>29.0</td>\n","      <td>10.0</td>\n","      <td>18.8</td>\n","      <td>...</td>\n","      <td>63.083</td>\n","      <td>78.933</td>\n","      <td>64</td>\n","      <td>500.0</td>\n","      <td>0.00</td>\n","      <td>30.0</td>\n","      <td>NaN</td>\n","      <td>21.4</td>\n","      <td>63.933</td>\n","      <td>78.733</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 28 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de561358-dfdb-4129-a87d-f84518b5359d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-de561358-dfdb-4129-a87d-f84518b5359d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-de561358-dfdb-4129-a87d-f84518b5359d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f1ad6650-7808-4cd2-b2ff-daae64b43d1f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f1ad6650-7808-4cd2-b2ff-daae64b43d1f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f1ad6650-7808-4cd2-b2ff-daae64b43d1f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["null_count_per_column = df.isnull().sum()\n","print(\"Number of null values per column:\")\n","print(null_count_per_column)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-ps8yJqsQpCt","executionInfo":{"status":"ok","timestamp":1725290997992,"user_tz":-330,"elapsed":20,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"74fec317-a88c-459b-ef93-3073748a06c5"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of null values per column:\n","INDEX            0\n","DATE             0\n","LATITUDE_A       0\n","LONGITUDE_A      0\n","ELEVATION_A      0\n","PRCP_A         133\n","SNWD_A           0\n","TMAX_A          61\n","TMIN_A         145\n","TAVG_A           0\n","LATITUDE_B       0\n","LONGITUDE_B      0\n","ELEVATION_B      0\n","PRCP_B           0\n","SNWD_B           0\n","TMAX_B           0\n","TMIN_B           0\n","TAVG_B           0\n","LATITUDE_C       0\n","LONGITUDE_C      0\n","ELEVATION_C      0\n","PRCP_C          45\n","SNWD_C           0\n","TMAX_C          52\n","TMIN_C         108\n","TAVG_C           6\n","LATITUDE         0\n","LONGITUDE        0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["df['DATE'] = pd.to_datetime(df['DATE'], format='%d-%m-%Y')\n","df_sorted = df.sort_values(by='DATE', ascending=True)"],"metadata":{"id":"eQMGpwuhSNto","executionInfo":{"status":"ok","timestamp":1725290997994,"user_tz":-330,"elapsed":16,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(12, 6))\n","plt.scatter(df_sorted['DATE'], df_sorted['TMAX_A'], color='red', label='TMAX_A')\n","plt.scatter(df_sorted['DATE'], df_sorted['TMIN_A'], color='blue', label='TMIN_A')\n","plt.scatter(df_sorted['DATE'], df_sorted['TAVG_A'], color='green', label='TAVG_A')\n","plt.title('Scatter Plot of Temperature Data')\n","plt.xlabel('Date')\n","plt.ylabel('Temperature')\n","plt.legend()\n","plt.grid(True)\n","plt.xticks(rotation=45)\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":607},"id":"XLPdJM73SWBV","executionInfo":{"status":"ok","timestamp":1725291001005,"user_tz":-330,"elapsed":3025,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"01609940-91fd-4c53-cd1f-f2eef34f5b2b"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Fill missing values\n","df_sorted['tavg_A'] = df_sorted['TAVG_A'].fillna((df_sorted['TMAX_A'] + df_sorted['TMIN_A']) / 2)\n","df_sorted['tmax_A'] = df_sorted['TMAX_A'].fillna(df_sorted['TAVG_A'] * 2 - df_sorted['TMIN_A'])\n","df_sorted['tmin_A'] = df_sorted['TMIN_A'].fillna(df_sorted['TAVG_A'] * 2 - df_sorted['TMAX_A'])\n","\n","df_sorted['tavg_b'] = df_sorted['TAVG_B'].fillna((df_sorted['TMAX_B'] + df_sorted['TMIN_B']) / 2)\n","df_sorted['tmax_b'] = df_sorted['TMAX_B'].fillna(df_sorted['TAVG_B'] * 2 - df_sorted['TMIN_B'])\n","df_sorted['tmin_b'] = df_sorted['TMIN_B'].fillna(df_sorted['TAVG_B'] * 2 - df_sorted['TMAX_B'])\n","\n","df_sorted['tavg_c'] = df_sorted['TAVG_C'].fillna((df_sorted['TMAX_C'] + df_sorted['TMIN_C']) / 2)\n","df_sorted['tmax_c'] = df_sorted['TMAX_C'].fillna(df_sorted['TAVG_C'] * 2 - df_sorted['TMIN_C'])\n","df_sorted['tmin_c'] = df_sorted['TMIN_C'].fillna(df_sorted['TAVG_C'] * 2 - df_sorted['TMAX_C'])"],"metadata":{"id":"sivNb7_HSgT2","executionInfo":{"status":"ok","timestamp":1725291001005,"user_tz":-330,"elapsed":17,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# Display updated DataFrame\n","print(df_sorted[['tavg_A', 'tmin_A', 'tmax_A', 'TAVG_A', 'TMIN_A', 'TMAX_A',\n","                 'tavg_b', 'tmin_b', 'tmax_b', 'TAVG_B', 'TMIN_B', 'TMAX_B']].head(10))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ITpyGGtDSptE","executionInfo":{"status":"ok","timestamp":1725291001006,"user_tz":-330,"elapsed":17,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"f37c6003-e5c0-472e-acbc-f6c871a1770b"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["     tavg_A  tmin_A  tmax_A  TAVG_A  TMIN_A  TMAX_A  tavg_b  tmin_b  tmax_b  \\\n","43     27.5     NaN     NaN    27.5     NaN     NaN    22.4    12.5    31.2   \n","147    31.0    25.0    36.0    31.0    25.0    36.0    29.8    23.1    38.8   \n","160    31.8    21.0    42.6    31.8    21.0     NaN    28.4    17.7    38.6   \n","152    28.8    22.0    38.0    28.8    22.0    38.0    27.3    18.1    35.9   \n","151    29.5     NaN     NaN    29.5     NaN     NaN    26.9    18.1    35.1   \n","197    23.5    17.0    35.0    23.5    17.0    35.0    24.5    17.1    35.2   \n","50     -0.2    -4.4     4.0    -0.2     NaN     4.0    -1.2    -3.5     2.4   \n","189    -5.8    -8.6    -3.0    -5.8     NaN    -3.0    -4.0    -7.3     0.5   \n","187    -4.4    -9.8     1.0    -4.4     NaN     1.0    -3.2    -8.0     1.0   \n","79     -8.0     NaN     NaN    -8.0     NaN     NaN    -5.3    -8.0    -1.6   \n","\n","     TAVG_B  TMIN_B  TMAX_B  \n","43     22.4    12.5    31.2  \n","147    29.8    23.1    38.8  \n","160    28.4    17.7    38.6  \n","152    27.3    18.1    35.9  \n","151    26.9    18.1    35.1  \n","197    24.5    17.1    35.2  \n","50     -1.2    -3.5     2.4  \n","189    -4.0    -7.3     0.5  \n","187    -3.2    -8.0     1.0  \n","79     -5.3    -8.0    -1.6  \n"]}]},{"cell_type":"code","source":["null_count_per_column = df_sorted.isnull().sum()\n","print(\"Number of null values per column:\")\n","print(null_count_per_column)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"93gBUx-ISstD","executionInfo":{"status":"ok","timestamp":1725291149389,"user_tz":-330,"elapsed":546,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"f359d66e-3c40-4537-84b5-77859cc9ee43"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of null values per column:\n","INDEX            0\n","DATE             0\n","LATITUDE_A       0\n","LONGITUDE_A      0\n","ELEVATION_A      0\n","PRCP_A         133\n","SNWD_A           0\n","TMAX_A          61\n","TMIN_A         145\n","TAVG_A           0\n","LATITUDE_B       0\n","LONGITUDE_B      0\n","ELEVATION_B      0\n","PRCP_B           0\n","SNWD_B           0\n","TMAX_B           0\n","TMIN_B           0\n","TAVG_B           0\n","LATITUDE_C       0\n","LONGITUDE_C      0\n","ELEVATION_C      0\n","PRCP_C          45\n","SNWD_C           0\n","TMAX_C          52\n","TMIN_C         108\n","TAVG_C           6\n","LATITUDE         0\n","LONGITUDE        0\n","tavg_A           0\n","tmax_A          49\n","tmin_A          49\n","tavg_b           0\n","tmax_b           0\n","tmin_b           0\n","tavg_c           6\n","tmax_c          31\n","tmin_c          31\n","dtype: int64\n"]}]},{"cell_type":"code","source":["columns_to_drop = [\"TMAX_A\", \"TMIN_A\", \"TAVG_A\", \"TMAX_B\", \"TMIN_B\", \"TAVG_B\", \"TMAX_C\", \"TMIN_C\", \"TAVG_C\"]\n","df_sorted = df_sorted.drop(columns=columns_to_drop)"],"metadata":{"id":"SzwKfqWqXbkM","executionInfo":{"status":"ok","timestamp":1725291163808,"user_tz":-330,"elapsed":561,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# Calculate and compare TAVG values\n","df_sorted['Calculated_tavg_A'] = (df_sorted['tmax_A'] + df_sorted['tmin_A']) / 2\n","df_sorted['Calculated_tavg_b'] = (df_sorted['tmax_b'] + df_sorted['tmin_b']) / 2\n","df_sorted['Calculated_tavg_c'] = (df_sorted['tmax_c'] + df_sorted['tmin_c']) / 2\n","\n","mismatch_tavg_A = df_sorted[(~df_sorted['tavg_A'].isna()) & (~df_sorted['Calculated_tavg_A'].isna()) & (df_sorted['tavg_A'] != df_sorted['Calculated_tavg_A'])]\n","mismatch_tavg_b = df_sorted[(~df_sorted['tavg_b'].isna()) & (~df_sorted['Calculated_tavg_b'].isna()) & (df_sorted['tavg_b'] != df_sorted['Calculated_tavg_b'])]\n","mismatch_tavg_c = df_sorted[(~df_sorted['tavg_c'].isna()) & (~df_sorted['Calculated_tavg_c'].isna()) & (df_sorted['tavg_c'] != df_sorted['Calculated_tavg_c'])]\n","\n","mismatch_tmin_max_A = df_sorted[(~df_sorted['tmin_A'].isna()) & (~df_sorted['tmax_A'].isna()) & (df_sorted['tmin_A'] > df_sorted['tmax_A'])]\n","mismatch_tmin_max_b = df_sorted[(~df_sorted['tmin_b'].isna()) & (~df_sorted['tmax_b'].isna()) & (df_sorted['tmin_b'] > df_sorted['tmax_b'])]\n","mismatch_tmin_max_c = df_sorted[(~df_sorted['tmin_c'].isna()) & (~df_sorted['tmax_c'].isna()) & (df_sorted['tmin_c'] > df_sorted['tmax_c'])]"],"metadata":{"id":"n--mI2AfXfRx","executionInfo":{"status":"ok","timestamp":1725291177306,"user_tz":-330,"elapsed":767,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# Display mismatches\n","print(\"Mismatches in tavg_A:\")\n","print(mismatch_tavg_A[['DATE', 'tmax_A', 'tmin_A', 'tavg_A', 'Calculated_tavg_A']])\n","print(\"\\nMismatches in tavg_b:\")\n","print(mismatch_tavg_b[['DATE', 'tmax_b', 'tmin_b', 'tavg_b', 'Calculated_tavg_b']])\n","print(\"\\nMismatches in tavg_c:\")\n","print(mismatch_tavg_c[['DATE', 'tmax_c', 'tmin_c', 'tavg_c', 'Calculated_tavg_c']])\n","\n","print(\"\\nRows where tmin_A > tmax_A:\")\n","print(mismatch_tmin_max_A[['DATE', 'tmax_A', 'tmin_A', 'tavg_A']])\n","print(\"\\nRows where tmin_b > tmax_b:\")\n","print(mismatch_tmin_max_b[['DATE', 'tmax_b', 'tmin_b', 'tavg_b']])\n","print(\"\\nRows where tmin_c > tmax_c:\")\n","print(mismatch_tmin_max_c[['DATE', 'tmax_c', 'tmin_c', 'tavg_c']])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"saY77Ym9Xi7t","executionInfo":{"status":"ok","timestamp":1725291189123,"user_tz":-330,"elapsed":537,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"c2c1575c-7e4c-47e1-8543-f8d7e8eef279"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Mismatches in tavg_A:\n","          DATE  tmax_A  tmin_A  tavg_A  Calculated_tavg_A\n","147 1975-07-12    36.0    25.0    31.0               30.5\n","152 1975-07-30    38.0    22.0    28.8               30.0\n","197 1975-08-15    35.0    17.0    23.5               26.0\n","50  1975-11-30     4.0    -4.4    -0.2               -0.2\n","182 1975-12-16     2.0   -13.0    -4.6               -5.5\n","119 1976-02-11   -13.0   -15.0   -14.2              -14.0\n","101 1976-03-17    -4.0    -9.0    -6.3               -6.5\n","166 1976-04-27    21.0     9.0    14.5               15.0\n","61  1976-05-06    25.0    10.0    12.4               17.5\n","46  1976-06-01    30.0    15.0    21.4               22.5\n","17  1976-07-27    37.0    19.0    31.8               28.0\n","114 1976-08-15    34.0    18.0    22.0               26.0\n","94  1976-09-14    23.0     6.0    13.2               14.5\n","162 1976-09-17    26.0     9.0    14.8               17.5\n","95  1976-10-05    10.0    -1.0     2.6                4.5\n","53  1976-11-17     6.0   -10.0    -3.8               -2.0\n","201 1976-12-20   -11.0   -18.0   -15.8              -14.5\n","126 1977-01-14   -16.0   -24.0   -21.0              -20.0\n","130 1977-04-30    25.0     8.0    17.5               16.5\n","13  1977-07-04    36.0    21.0    26.8               28.5\n","64  1977-09-14    24.0     8.0    15.8               16.0\n","173 1977-10-24     9.0    -4.0     3.6                2.5\n","177 1978-02-15     3.0   -20.0    -3.8               -8.5\n","183 1978-03-23    12.0     0.0     2.8                6.0\n","136 1978-03-27    12.0     1.0     4.4                6.5\n","74  1978-04-19    22.0     6.0    13.4               14.0\n","116 1978-08-30    30.0     9.0    19.0               19.5\n","146 1978-09-14    30.0    13.0    18.0               21.5\n","168 1978-12-06     5.0     1.0     3.4                3.0\n","159 1979-02-07     2.0     0.0     1.2                1.0\n","81  1979-04-14    18.0     9.0    12.8               13.5\n","150 1979-05-10    29.0    11.0    18.7               20.0\n","16  1979-05-20    32.0    12.0    22.6               22.0\n","135 1979-06-09    31.0    16.0    23.4               23.5\n","52  1979-07-22    34.0    17.0    27.8               25.5\n","111 1979-09-16    26.0     9.0    16.5               17.5\n","132 1979-10-15    20.0     8.0    13.0               14.0\n","22  1979-11-27     9.0   -10.6    -0.8               -0.8\n","125 1979-11-29    12.0    -2.0     2.3                5.0\n","34  1979-12-02     6.0   -13.2    -3.6               -3.6\n","85  1979-12-04     5.0     1.0     2.4                3.0\n","62  1979-12-13     6.0    -1.0     1.8                2.5\n","134 1980-01-02    -2.0    -4.0    -3.3               -3.0\n","47  1980-02-03    -3.0   -15.0    -9.8               -9.0\n","29  1980-03-29    20.0     1.0    10.0               10.5\n","124 1980-07-09    38.0    22.0    31.4               30.0\n","72  1980-08-30    20.0     8.0    14.8               14.0\n","4   1980-09-02    29.0    10.0    18.8               19.5\n","\n","Mismatches in tavg_b:\n","          DATE  tmax_b  tmin_b  tavg_b  Calculated_tavg_b\n","43  1975-06-08    31.2    12.5    22.4              21.85\n","147 1975-07-12    38.8    23.1    29.8              30.95\n","160 1975-07-18    38.6    17.7    28.4              28.15\n","152 1975-07-30    35.9    18.1    27.3              27.00\n","151 1975-08-05    35.1    18.1    26.9              26.60\n","..         ...     ...     ...     ...                ...\n","200 1980-07-24    36.4    20.1    27.6              28.25\n","31  1980-08-06    29.4    16.1    23.1              22.75\n","158 1980-08-14    31.2    16.9    23.6              24.05\n","72  1980-08-30    22.0    13.3    17.3              17.65\n","4   1980-09-02    29.5     9.0    18.8              19.25\n","\n","[199 rows x 5 columns]\n","\n","Mismatches in tavg_c:\n","          DATE  tmax_c  tmin_c  tavg_c  Calculated_tavg_c\n","43  1975-06-08    31.0    15.0    27.0               23.0\n","147 1975-07-12    36.0    24.0    29.8               30.0\n","182 1975-12-16     4.0    -8.0    -4.2               -2.0\n","144 1976-01-03     5.0    -7.0    -2.0               -1.0\n","175 1976-02-15   -10.0   -19.0   -15.3              -14.5\n","..         ...     ...     ...     ...                ...\n","8   1980-04-15    19.0     6.0    11.7               12.5\n","124 1980-07-09    37.0    22.0    29.8               29.5\n","108 1980-07-20    34.0    14.0    23.8               24.0\n","190 1980-07-23    40.0    22.0    30.0               31.0\n","31  1980-08-06    31.0    18.0    26.2               24.5\n","\n","[74 rows x 5 columns]\n","\n","Rows where tmin_A > tmax_A:\n","Empty DataFrame\n","Columns: [DATE, tmax_A, tmin_A, tavg_A]\n","Index: []\n","\n","Rows where tmin_b > tmax_b:\n","Empty DataFrame\n","Columns: [DATE, tmax_b, tmin_b, tavg_b]\n","Index: []\n","\n","Rows where tmin_c > tmax_c:\n","Empty DataFrame\n","Columns: [DATE, tmax_c, tmin_c, tavg_c]\n","Index: []\n"]}]},{"cell_type":"code","source":["# Correct TMIN and TMAX mismatches\n","df_sorted.loc[df_sorted['tmin_A'] > df_sorted['tmax_A'], ['tmin_A', 'tmax_A']] = df_sorted.loc[df_sorted['tmin_A'] > df_sorted['tmax_A'], ['tmax_A', 'tmin_A']].values\n","df_sorted.loc[df_sorted['tmin_b'] > df_sorted['tmax_b'], ['tmin_b', 'tmax_b']] = df_sorted.loc[df_sorted['tmin_b'] > df_sorted['tmax_b'], ['tmax_b', 'tmin_b']].values\n","df_sorted.loc[df_sorted['tmin_c'] > df_sorted['tmax_c'], ['tmin_c', 'tmax_c']] = df_sorted.loc[df_sorted['tmin_c'] > df_sorted['tmax_c'], ['tmax_c', 'tmin_c']].values"],"metadata":{"id":"xBVkjuzaXlfx","executionInfo":{"status":"ok","timestamp":1725291221232,"user_tz":-330,"elapsed":616,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Print final DataFrame\n","print(df_sorted[['DATE', 'tmax_A', 'tmin_A', 'tavg_A', 'tmax_b', 'tmin_b', 'tavg_b', 'tmax_c', 'tmin_c', 'tavg_c']])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hFyI9EKVXtOP","executionInfo":{"status":"ok","timestamp":1725291233112,"user_tz":-330,"elapsed":582,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"7e62d789-3f0f-4e77-b8b9-4c1214e0ed21"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["          DATE  tmax_A  tmin_A  tavg_A  tmax_b  tmin_b  tavg_b  tmax_c  \\\n","43  1975-06-08     NaN     NaN    27.5    31.2    12.5    22.4    31.0   \n","147 1975-07-12    36.0    25.0    31.0    38.8    23.1    29.8    36.0   \n","160 1975-07-18    42.6    21.0    31.8    38.6    17.7    28.4    31.6   \n","152 1975-07-30    38.0    22.0    28.8    35.9    18.1    27.3     NaN   \n","151 1975-08-05     NaN     NaN    29.5    35.1    18.1    26.9     NaN   \n","..         ...     ...     ...     ...     ...     ...     ...     ...   \n","200 1980-07-24    34.0    20.0    27.0    36.4    20.1    27.6     NaN   \n","31  1980-08-06     NaN     NaN    25.0    29.4    16.1    23.1    31.0   \n","158 1980-08-14    33.4    17.0    25.2    31.2    16.9    23.6    31.0   \n","72  1980-08-30    20.0     8.0    14.8    22.0    13.3    17.3     NaN   \n","4   1980-09-02    29.0    10.0    18.8    29.5     9.0    18.8    30.0   \n","\n","     tmin_c  tavg_c  \n","43     15.0    27.0  \n","147    24.0    29.8  \n","160    17.0    24.3  \n","152     NaN     NaN  \n","151     NaN    28.4  \n","..      ...     ...  \n","200     NaN    27.0  \n","31     18.0    26.2  \n","158    18.2    24.6  \n","72      NaN    14.6  \n","4      12.8    21.4  \n","\n","[203 rows x 10 columns]\n"]}]},{"cell_type":"code","source":["print(df_sorted.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"29SYH3gzXv8Y","executionInfo":{"status":"ok","timestamp":1725291245058,"user_tz":-330,"elapsed":561,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"c41d9a8c-b2bc-4cbb-8b32-b91d51abc309"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['INDEX', 'DATE', 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'PRCP_A',\n","       'SNWD_A', 'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'PRCP_B',\n","       'SNWD_B', 'LATITUDE_C', 'LONGITUDE_C', 'ELEVATION_C', 'PRCP_C',\n","       'SNWD_C', 'LATITUDE', 'LONGITUDE', 'tavg_A', 'tmax_A', 'tmin_A',\n","       'tavg_b', 'tmax_b', 'tmin_b', 'tavg_c', 'tmax_c', 'tmin_c',\n","       'Calculated_tavg_A', 'Calculated_tavg_b', 'Calculated_tavg_c'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["def fill_missing_temps(df, temp_set):\n","    \"\"\"\n","    Fill missing temperatures in the DataFrame using calculated average deltas.\n","\n","    Parameters:\n","    - df: pandas DataFrame containing the temperature data.\n","    - temp_set: string indicating the temperature set ('A', 'b', 'c').\n","\n","    Returns:\n","    - Updated DataFrame with missing temperatures filled.\n","    \"\"\"\n","    try:\n","        # Define column names based on temp_set\n","        tmax_col = f'tmax_{temp_set}'\n","        tavg_col = f'tavg_{temp_set}'\n","        tmin_col = f'tmin_{temp_set}'\n","\n","        # Check if necessary columns exist\n","        required_columns = [tmax_col, tavg_col, tmin_col]\n","        missing_columns = [col for col in required_columns if col not in df.columns]\n","\n","        if missing_columns:\n","            raise KeyError(f\"Missing columns: {', '.join(missing_columns)}\")\n","\n","        # Calculate average delta values\n","        avg_delta_max = (df[tmax_col] - df[tavg_col]).mean(skipna=True)\n","        avg_delta_min = (df[tavg_col] - df[tmin_col]).mean(skipna=True)\n","\n","        # Check if the calculated delta values are valid\n","        if pd.isna(avg_delta_max) or pd.isna(avg_delta_min):\n","            raise ValueError(\"Average delta values could not be calculated.\")\n","\n","        # Fill missing average temperatures\n","        df[tavg_col] = df[tavg_col].fillna(\n","            df[tmax_col] - avg_delta_max\n","        )\n","\n","        # Fill missing maximum temperatures\n","        df[tmax_col] = df[tmax_col].fillna(\n","            df[tavg_col] + avg_delta_max\n","        )\n","\n","        # Fill missing minimum temperatures\n","        df[tmin_col] = df[tmin_col].fillna(\n","            df[tavg_col] - avg_delta_min\n","        )\n","\n","    except Exception as e:\n","        print(f\"Error filling missing temperatures for set {temp_set}: {e}\")\n","\n","    return df\n","\n","# Apply the function to each temperature set\n","df_sorted = fill_missing_temps(df_sorted, 'A')\n","df_sorted = fill_missing_temps(df_sorted, 'b')\n","df_sorted = fill_missing_temps(df_sorted, 'c')"],"metadata":{"id":"r01ZjEVsX1sR","executionInfo":{"status":"ok","timestamp":1725291276725,"user_tz":-330,"elapsed":566,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["null_count_per_column = df_sorted.isnull().sum()\n","print(\"Number of null values per column:\")\n","print(null_count_per_column)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V9adarX5X7Jy","executionInfo":{"status":"ok","timestamp":1725291287994,"user_tz":-330,"elapsed":567,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"a42081a0-b04d-4bc4-e936-c71e74919633"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of null values per column:\n","INDEX                  0\n","DATE                   0\n","LATITUDE_A             0\n","LONGITUDE_A            0\n","ELEVATION_A            0\n","PRCP_A               133\n","SNWD_A                 0\n","LATITUDE_B             0\n","LONGITUDE_B            0\n","ELEVATION_B            0\n","PRCP_B                 0\n","SNWD_B                 0\n","LATITUDE_C             0\n","LONGITUDE_C            0\n","ELEVATION_C            0\n","PRCP_C                45\n","SNWD_C                 0\n","LATITUDE               0\n","LONGITUDE              0\n","tavg_A                 0\n","tmax_A                 0\n","tmin_A                 0\n","tavg_b                 0\n","tmax_b                 0\n","tmin_b                 0\n","tavg_c                 6\n","tmax_c                 6\n","tmin_c                 6\n","Calculated_tavg_A     49\n","Calculated_tavg_b      0\n","Calculated_tavg_c     31\n","dtype: int64\n"]}]},{"cell_type":"code","source":["# Merge 'Calculated_tavg_A' with 'tavg_A'\n","df_sorted['Calculated_tavg_A'] = df_sorted['Calculated_tavg_A'].fillna(df_sorted['tavg_A'])\n","\n","# Merge 'Calculated_tavg_b' with 'tavg_b'\n","df_sorted['Calculated_tavg_b'] = df_sorted['Calculated_tavg_b'].fillna(df_sorted['tavg_b'])\n","\n","# Merge 'Calculated_tavg_c' with 'tavg_c'\n","df_sorted['Calculated_tavg_c'] = df_sorted['Calculated_tavg_c'].fillna(df_sorted['tavg_c'])\n","\n","# Check the results\n","print(df_sorted[['Calculated_tavg_A', 'Calculated_tavg_b', 'Calculated_tavg_c']].head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xam3gqy5X-lE","executionInfo":{"status":"ok","timestamp":1725291310070,"user_tz":-330,"elapsed":531,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"a5d28c34-aca0-4ba4-f58c-c3709c11710b"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["     Calculated_tavg_A  Calculated_tavg_b  Calculated_tavg_c\n","43                27.5              21.85               23.0\n","147               30.5              30.95               30.0\n","160               31.8              28.15               24.3\n","152               30.0              27.00                NaN\n","151               29.5              26.60               28.4\n"]}]},{"cell_type":"code","source":["df_sorted = df_sorted.drop(columns=['tavg_A', 'tavg_b', 'tavg_c'])"],"metadata":{"id":"MItzaxEDYC-m","executionInfo":{"status":"ok","timestamp":1725291319467,"user_tz":-330,"elapsed":610,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["df_sorted = df_sorted.rename(columns={\n","    'Calculated_tavg_A': 'Tavg_A',\n","    'Calculated_tavg_b': 'Tavg_B',\n","    'Calculated_tavg_c': 'Tavg_C'\n","})"],"metadata":{"id":"LdZlpDo-YFA2","executionInfo":{"status":"ok","timestamp":1725291327018,"user_tz":-330,"elapsed":557,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["df_sorted.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PoM65cegYG5v","executionInfo":{"status":"ok","timestamp":1725291335567,"user_tz":-330,"elapsed":543,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"88bbea33-80f4-423d-d921-9d12be2c9a1b"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['INDEX', 'DATE', 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'PRCP_A',\n","       'SNWD_A', 'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'PRCP_B',\n","       'SNWD_B', 'LATITUDE_C', 'LONGITUDE_C', 'ELEVATION_C', 'PRCP_C',\n","       'SNWD_C', 'LATITUDE', 'LONGITUDE', 'tmax_A', 'tmin_A', 'tmax_b',\n","       'tmin_b', 'tmax_c', 'tmin_c', 'Tavg_A', 'Tavg_B', 'Tavg_C'],\n","      dtype='object')"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["df_sorted.fillna(method='ffill', inplace=True)\n","\n","# Optional: Fill remaining NaN values with 0 if there are any left\n","df_sorted.fillna(0, inplace=True)\n","\n","# Display the final DataFrame\n","print(df_sorted.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t2pRhoSAYJqh","executionInfo":{"status":"ok","timestamp":1725291347013,"user_tz":-330,"elapsed":587,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"f348d423-5223-4483-b13e-b7186be968b2"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["     INDEX       DATE  LATITUDE_A  LONGITUDE_A  ELEVATION_A  PRCP_A  SNWD_A  \\\n","43      43 1975-06-08      63.883       77.517          128     0.0    0.00   \n","147    147 1975-07-12      63.883       77.517          128     0.0    2.46   \n","160    160 1975-07-18      63.883       77.517          128     0.0    0.00   \n","152    152 1975-07-30      63.883       77.517          128     0.0    0.00   \n","151    151 1975-08-05      63.883       77.517          128     0.0    0.00   \n","\n","     LATITUDE_B  LONGITUDE_B  ELEVATION_B  ...  LONGITUDE     tmax_A  \\\n","43        62.95      79.8167           66  ...     78.733  34.133117   \n","147       62.95      79.8167           66  ...     78.733  36.000000   \n","160       62.95      79.8167           66  ...     78.733  42.600000   \n","152       62.95      79.8167           66  ...     78.733  38.000000   \n","151       62.95      79.8167           66  ...     78.733  36.133117   \n","\n","        tmin_A  tmax_b  tmin_b     tmax_c     tmin_c  Tavg_A  Tavg_B  Tavg_C  \n","43   21.242208    31.2    12.5  31.000000  15.000000    27.5   21.85    23.0  \n","147  25.000000    38.8    23.1  36.000000  24.000000    30.5   30.95    30.0  \n","160  21.000000    38.6    17.7  31.600000  17.000000    31.8   28.15    24.3  \n","152  22.000000    35.9    18.1  31.600000  17.000000    30.0   27.00    24.3  \n","151  23.242208    35.1    18.1  35.697674  21.776744    29.5   26.60    28.4  \n","\n","[5 rows x 28 columns]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-22-f5aa8adc1273>:1: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n","  df_sorted.fillna(method='ffill', inplace=True)\n"]}]},{"cell_type":"code","source":["null_count_per_column = df_sorted.isnull().sum()\n","print(\"Number of null values per column:\")\n","print(null_count_per_column)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vRHY2GM_YLsi","executionInfo":{"status":"ok","timestamp":1725291359436,"user_tz":-330,"elapsed":739,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"9b5d5613-4844-4d1a-f6bd-926d1f69cb85"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of null values per column:\n","INDEX          0\n","DATE           0\n","LATITUDE_A     0\n","LONGITUDE_A    0\n","ELEVATION_A    0\n","PRCP_A         0\n","SNWD_A         0\n","LATITUDE_B     0\n","LONGITUDE_B    0\n","ELEVATION_B    0\n","PRCP_B         0\n","SNWD_B         0\n","LATITUDE_C     0\n","LONGITUDE_C    0\n","ELEVATION_C    0\n","PRCP_C         0\n","SNWD_C         0\n","LATITUDE       0\n","LONGITUDE      0\n","tmax_A         0\n","tmin_A         0\n","tmax_b         0\n","tmin_b         0\n","tmax_c         0\n","tmin_c         0\n","Tavg_A         0\n","Tavg_B         0\n","Tavg_C         0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["df_sorted.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i8nUZbAUYOur","executionInfo":{"status":"ok","timestamp":1725291369359,"user_tz":-330,"elapsed":544,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"4b18baa3-d8e7-4b90-8d84-37f28a6ac17c"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['INDEX', 'DATE', 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'PRCP_A',\n","       'SNWD_A', 'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'PRCP_B',\n","       'SNWD_B', 'LATITUDE_C', 'LONGITUDE_C', 'ELEVATION_C', 'PRCP_C',\n","       'SNWD_C', 'LATITUDE', 'LONGITUDE', 'tmax_A', 'tmin_A', 'tmax_b',\n","       'tmin_b', 'tmax_c', 'tmin_c', 'Tavg_A', 'Tavg_B', 'Tavg_C'],\n","      dtype='object')"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["# Add a new column 'ELEVATION' with a constant value of 63\n","df_sorted['ELEVATION'] = 63\n","\n","# Select the columns 'LONGITUDE', 'LATITUDE', and 'TAVG', and include the new 'ELEVATION' column\n","D = df_sorted[['LONGITUDE', 'LATITUDE', 'ELEVATION']]"],"metadata":{"id":"6Ymz6YsLYRNJ","executionInfo":{"status":"ok","timestamp":1725291388275,"user_tz":-330,"elapsed":571,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["# DataFrame for A combination\n","A_withPRCP_test = df_sorted[['DATE', 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'PRCP_A', 'SNWD_A', 'tmax_A', 'tmin_A', 'Tavg_A', 'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","print(\"A_withPRCP:\")\n","print(A_withPRCP_test.head())\n","\n","# DataFrame for B combination\n","B_withPRCP_test = df_sorted[['DATE', 'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'PRCP_B', 'SNWD_B', 'tmax_b', 'tmin_b', 'Tavg_B', 'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","print(\"\\nB_withPRCP:\")\n","print(B_withPRCP_test.head())\n","\n","# DataFrame for C combination\n","C_withPRCP_test = df_sorted[['DATE', 'LATITUDE_C', 'LONGITUDE_C', 'ELEVATION_C', 'PRCP_C', 'SNWD_C', 'tmax_c', 'tmin_c', 'Tavg_C', 'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","print(\"\\nC_withPRCP:\")\n","print(C_withPRCP_test.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EhYSVQHyYVyB","executionInfo":{"status":"ok","timestamp":1725291708583,"user_tz":-330,"elapsed":688,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"59f94685-17d8-4939-d191-3c9f3bd41da8"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["A_withPRCP:\n","          DATE  LATITUDE_A  LONGITUDE_A  ELEVATION_A  PRCP_A  SNWD_A  \\\n","43  1975-06-08      63.883       77.517          128     0.0    0.00   \n","147 1975-07-12      63.883       77.517          128     0.0    2.46   \n","160 1975-07-18      63.883       77.517          128     0.0    0.00   \n","152 1975-07-30      63.883       77.517          128     0.0    0.00   \n","151 1975-08-05      63.883       77.517          128     0.0    0.00   \n","\n","        tmax_A     tmin_A  Tavg_A  LONGITUDE  LATITUDE  ELEVATION  \n","43   34.133117  21.242208    27.5     78.733    63.933         63  \n","147  36.000000  25.000000    30.5     78.733    63.933         63  \n","160  42.600000  21.000000    31.8     78.733    63.933         63  \n","152  38.000000  22.000000    30.0     78.733    63.933         63  \n","151  36.133117  23.242208    29.5     78.733    63.933         63  \n","\n","B_withPRCP:\n","          DATE  LATITUDE_B  LONGITUDE_B  ELEVATION_B  PRCP_B  SNWD_B  tmax_b  \\\n","43  1975-06-08       62.95      79.8167           66       0     0.0    31.2   \n","147 1975-07-12       62.95      79.8167           66       0     0.0    38.8   \n","160 1975-07-18       62.95      79.8167           66       0     0.0    38.6   \n","152 1975-07-30       62.95      79.8167           66       0     0.0    35.9   \n","151 1975-08-05       62.95      79.8167           66       0     0.0    35.1   \n","\n","     tmin_b  Tavg_B  LONGITUDE  LATITUDE  ELEVATION  \n","43     12.5   21.85     78.733    63.933         63  \n","147    23.1   30.95     78.733    63.933         63  \n","160    17.7   28.15     78.733    63.933         63  \n","152    18.1   27.00     78.733    63.933         63  \n","151    18.1   26.60     78.733    63.933         63  \n","\n","C_withPRCP:\n","          DATE  LATITUDE_C  LONGITUDE_C  ELEVATION_C  PRCP_C  SNWD_C  \\\n","43  1975-06-08      63.083       78.933           64     0.0     0.0   \n","147 1975-07-12      63.083       78.933           64     0.0     0.0   \n","160 1975-07-18      63.083       78.933           64     0.0     0.0   \n","152 1975-07-30      63.083       78.933           64     0.0     0.0   \n","151 1975-08-05      63.083       78.933           64     0.0     0.0   \n","\n","        tmax_c     tmin_c  Tavg_C  LONGITUDE  LATITUDE  ELEVATION  \n","43   31.000000  15.000000    23.0     78.733    63.933         63  \n","147  36.000000  24.000000    30.0     78.733    63.933         63  \n","160  31.600000  17.000000    24.3     78.733    63.933         63  \n","152  31.600000  17.000000    24.3     78.733    63.933         63  \n","151  35.697674  21.776744    28.4     78.733    63.933         63  \n"]}]},{"cell_type":"code","source":["# Step 1: Add 'ELEVATION' column with default value of 63 to df_sorted\n","df_sorted['ELEVATION'] = 63\n","\n","# Print the column names to verify the addition\n","print(df_sorted.columns)\n","\n","# Step 2: Define the DataFrames with the newly added 'ELEVATION' column\n","\n","# DataFrame for AC combination\n","AC_withPRCP_test = df_sorted[['DATE', 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'PRCP_A', 'SNWD_A', 'tmax_A', 'tmin_A', 'Tavg_A',\n","                         'LATITUDE_C', 'LONGITUDE_C', 'ELEVATION_C', 'PRCP_C', 'SNWD_C', 'tmax_c', 'tmin_c', 'Tavg_C',\n","                         'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","print(\"\\nAC_withPRCP:\")\n","print(AC_withPRCP_test.head())\n","\n","# DataFrame for BC combination\n","BC_withPRCP_test = df_sorted[['DATE', 'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'PRCP_B', 'SNWD_B', 'tmax_b', 'tmin_b', 'Tavg_B',\n","                         'LATITUDE_C', 'LONGITUDE_C', 'ELEVATION_C', 'PRCP_C', 'SNWD_C', 'tmax_c', 'tmin_c', 'Tavg_C',\n","                         'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","print(\"\\nBC_withPRCP:\")\n","print(BC_withPRCP_test.head())\n","\n","# DataFrame for AB combination\n","AB_withPRCP_test = df_sorted[['DATE', 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'PRCP_A', 'SNWD_A', 'tmax_A', 'tmin_A', 'Tavg_A',\n","                         'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'PRCP_B', 'SNWD_B', 'tmax_b', 'tmin_b', 'Tavg_B',\n","                         'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","print(\"\\nAB_withPRCP:\")\n","print(AB_withPRCP_test.head())\n","\n","# DataFrame for ABC combination\n","ABC_withPRCP_test = df_sorted[['DATE', 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'PRCP_A', 'SNWD_A', 'tmax_A', 'tmin_A', 'Tavg_A',\n","                          'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'PRCP_B', 'SNWD_B', 'tmax_b', 'tmin_b', 'Tavg_B',\n","                          'LATITUDE_C', 'LONGITUDE_C', 'ELEVATION_C', 'PRCP_C', 'SNWD_C', 'tmax_c', 'tmin_c', 'Tavg_C',\n","                          'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","print(\"\\nABC_withPRCP:\")\n","print(ABC_withPRCP_test.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_ZhU5TbMYTik","executionInfo":{"status":"ok","timestamp":1725291762010,"user_tz":-330,"elapsed":9,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"3e3623ac-4735-41fc-ef4f-b612d44b2e05"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['INDEX', 'DATE', 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'PRCP_A',\n","       'SNWD_A', 'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'PRCP_B',\n","       'SNWD_B', 'LATITUDE_C', 'LONGITUDE_C', 'ELEVATION_C', 'PRCP_C',\n","       'SNWD_C', 'LATITUDE', 'LONGITUDE', 'tmax_A', 'tmin_A', 'tmax_b',\n","       'tmin_b', 'tmax_c', 'tmin_c', 'Tavg_A', 'Tavg_B', 'Tavg_C',\n","       'ELEVATION'],\n","      dtype='object')\n","\n","AC_withPRCP:\n","          DATE  LATITUDE_A  LONGITUDE_A  ELEVATION_A  PRCP_A  SNWD_A  \\\n","43  1975-06-08      63.883       77.517          128     0.0    0.00   \n","147 1975-07-12      63.883       77.517          128     0.0    2.46   \n","160 1975-07-18      63.883       77.517          128     0.0    0.00   \n","152 1975-07-30      63.883       77.517          128     0.0    0.00   \n","151 1975-08-05      63.883       77.517          128     0.0    0.00   \n","\n","        tmax_A     tmin_A  Tavg_A  LATITUDE_C  LONGITUDE_C  ELEVATION_C  \\\n","43   34.133117  21.242208    27.5      63.083       78.933           64   \n","147  36.000000  25.000000    30.5      63.083       78.933           64   \n","160  42.600000  21.000000    31.8      63.083       78.933           64   \n","152  38.000000  22.000000    30.0      63.083       78.933           64   \n","151  36.133117  23.242208    29.5      63.083       78.933           64   \n","\n","     PRCP_C  SNWD_C     tmax_c     tmin_c  Tavg_C  LONGITUDE  LATITUDE  \\\n","43      0.0     0.0  31.000000  15.000000    23.0     78.733    63.933   \n","147     0.0     0.0  36.000000  24.000000    30.0     78.733    63.933   \n","160     0.0     0.0  31.600000  17.000000    24.3     78.733    63.933   \n","152     0.0     0.0  31.600000  17.000000    24.3     78.733    63.933   \n","151     0.0     0.0  35.697674  21.776744    28.4     78.733    63.933   \n","\n","     ELEVATION  \n","43          63  \n","147         63  \n","160         63  \n","152         63  \n","151         63  \n","\n","BC_withPRCP:\n","          DATE  LATITUDE_B  LONGITUDE_B  ELEVATION_B  PRCP_B  SNWD_B  tmax_b  \\\n","43  1975-06-08       62.95      79.8167           66       0     0.0    31.2   \n","147 1975-07-12       62.95      79.8167           66       0     0.0    38.8   \n","160 1975-07-18       62.95      79.8167           66       0     0.0    38.6   \n","152 1975-07-30       62.95      79.8167           66       0     0.0    35.9   \n","151 1975-08-05       62.95      79.8167           66       0     0.0    35.1   \n","\n","     tmin_b  Tavg_B  LATITUDE_C  LONGITUDE_C  ELEVATION_C  PRCP_C  SNWD_C  \\\n","43     12.5   21.85      63.083       78.933           64     0.0     0.0   \n","147    23.1   30.95      63.083       78.933           64     0.0     0.0   \n","160    17.7   28.15      63.083       78.933           64     0.0     0.0   \n","152    18.1   27.00      63.083       78.933           64     0.0     0.0   \n","151    18.1   26.60      63.083       78.933           64     0.0     0.0   \n","\n","        tmax_c     tmin_c  Tavg_C  LONGITUDE  LATITUDE  ELEVATION  \n","43   31.000000  15.000000    23.0     78.733    63.933         63  \n","147  36.000000  24.000000    30.0     78.733    63.933         63  \n","160  31.600000  17.000000    24.3     78.733    63.933         63  \n","152  31.600000  17.000000    24.3     78.733    63.933         63  \n","151  35.697674  21.776744    28.4     78.733    63.933         63  \n","\n","AB_withPRCP:\n","          DATE  LATITUDE_A  LONGITUDE_A  ELEVATION_A  PRCP_A  SNWD_A  \\\n","43  1975-06-08      63.883       77.517          128     0.0    0.00   \n","147 1975-07-12      63.883       77.517          128     0.0    2.46   \n","160 1975-07-18      63.883       77.517          128     0.0    0.00   \n","152 1975-07-30      63.883       77.517          128     0.0    0.00   \n","151 1975-08-05      63.883       77.517          128     0.0    0.00   \n","\n","        tmax_A     tmin_A  Tavg_A  LATITUDE_B  LONGITUDE_B  ELEVATION_B  \\\n","43   34.133117  21.242208    27.5       62.95      79.8167           66   \n","147  36.000000  25.000000    30.5       62.95      79.8167           66   \n","160  42.600000  21.000000    31.8       62.95      79.8167           66   \n","152  38.000000  22.000000    30.0       62.95      79.8167           66   \n","151  36.133117  23.242208    29.5       62.95      79.8167           66   \n","\n","     PRCP_B  SNWD_B  tmax_b  tmin_b  Tavg_B  LONGITUDE  LATITUDE  ELEVATION  \n","43        0     0.0    31.2    12.5   21.85     78.733    63.933         63  \n","147       0     0.0    38.8    23.1   30.95     78.733    63.933         63  \n","160       0     0.0    38.6    17.7   28.15     78.733    63.933         63  \n","152       0     0.0    35.9    18.1   27.00     78.733    63.933         63  \n","151       0     0.0    35.1    18.1   26.60     78.733    63.933         63  \n","\n","ABC_withPRCP:\n","          DATE  LATITUDE_A  LONGITUDE_A  ELEVATION_A  PRCP_A  SNWD_A  \\\n","43  1975-06-08      63.883       77.517          128     0.0    0.00   \n","147 1975-07-12      63.883       77.517          128     0.0    2.46   \n","160 1975-07-18      63.883       77.517          128     0.0    0.00   \n","152 1975-07-30      63.883       77.517          128     0.0    0.00   \n","151 1975-08-05      63.883       77.517          128     0.0    0.00   \n","\n","        tmax_A     tmin_A  Tavg_A  LATITUDE_B  ...  LONGITUDE_C  ELEVATION_C  \\\n","43   34.133117  21.242208    27.5       62.95  ...       78.933           64   \n","147  36.000000  25.000000    30.5       62.95  ...       78.933           64   \n","160  42.600000  21.000000    31.8       62.95  ...       78.933           64   \n","152  38.000000  22.000000    30.0       62.95  ...       78.933           64   \n","151  36.133117  23.242208    29.5       62.95  ...       78.933           64   \n","\n","     PRCP_C  SNWD_C     tmax_c     tmin_c  Tavg_C  LONGITUDE  LATITUDE  \\\n","43      0.0     0.0  31.000000  15.000000    23.0     78.733    63.933   \n","147     0.0     0.0  36.000000  24.000000    30.0     78.733    63.933   \n","160     0.0     0.0  31.600000  17.000000    24.3     78.733    63.933   \n","152     0.0     0.0  31.600000  17.000000    24.3     78.733    63.933   \n","151     0.0     0.0  35.697674  21.776744    28.4     78.733    63.933   \n","\n","     ELEVATION  \n","43          63  \n","147         63  \n","160         63  \n","152         63  \n","151         63  \n","\n","[5 rows x 28 columns]\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Ensure df_sorted has the 'ELEVATION' column with a default value of 63\n","if 'ELEVATION' not in df_sorted.columns:\n","    df_sorted['ELEVATION'] = 63\n","\n","# DataFrame for A combination without PRCP\n","A_noPRCP_test = df_sorted[['DATE', 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'tmax_A', 'tmin_A', 'Tavg_A', 'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","print(\"A_noPRCP:\")\n","print(A_noPRCP_test.head())\n","\n","# DataFrame for B combination without PRCP\n","B_noPRCP_test= df_sorted[['DATE', 'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'tmax_b', 'tmin_b', 'Tavg_B', 'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","print(\"\\nB_noPRCP:\")\n","print(B_noPRCP_test.head())\n","\n","# DataFrame for C combination without PRCP\n","C_noPRCP_test = df_sorted[['DATE', 'LATITUDE_C', 'LONGITUDE_C', 'ELEVATION_C', 'tmax_c', 'tmin_c', 'Tavg_C', 'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","print(\"\\nC_noPRCP:\")\n","print(C_noPRCP_test.head())\n","\n","# DataFrame for AC combination without PRCP\n","AC_noPRCP_test = df_sorted[['DATE', 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'SNWD_A', 'tmax_A', 'tmin_A', 'Tavg_A',\n","                       'LATITUDE_C', 'LONGITUDE_C', 'ELEVATION_C', 'tmax_c', 'tmin_c', 'Tavg_C',\n","                       'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","print(\"\\nAC_noPRCP:\")\n","print(AC_noPRCP_test.head())\n","\n","# DataFrame for BC combination without PRCP\n","BC_noPRCP_test = df_sorted[['DATE', 'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'tmax_b', 'tmin_b', 'Tavg_B',\n","                       'LATITUDE_C', 'LONGITUDE_C', 'ELEVATION_C', 'tmax_c', 'tmin_c', 'Tavg_C',\n","                       'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","print(\"\\nBC_noPRCP:\")\n","print(BC_noPRCP_test.head())\n","\n","# DataFrame for AB combination without PRCP\n","AB_noPRCP_test = df_sorted[['DATE', 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'tmax_A', 'tmin_A', 'Tavg_A',\n","                       'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'tmax_b', 'tmin_b', 'Tavg_B',\n","                       'LONGITUDE', 'LATITUDE', 'ELEVATION']]\n","print(\"\\nAB_noPRCP:\")\n","print(AB_noPRCP_test.head())\n","\n","# DataFrame for ABC combination without PRCP\n","ABC_noPRCP_test = df_sorted[['DATE', 'LATITUDE_A', 'LONGITUDE_A', 'ELEVATION_A', 'tmax_A', 'tmin_A', 'Tavg_A',\n","                        'LATITUDE_B', 'LONGITUDE_B', 'ELEVATION_B', 'tmax_b', 'tmin_b', 'Tavg_B',\n","                        'LATITUDE_C', 'LONGITUDE_C', 'ELEVATION_C', 'tmax_c', 'tmin_c', 'Tavg_C',\n","                        'LONGITUDE', 'LATITUDE','ELEVATION']]\n","print(\"\\nABC_noPRCP:\")\n","print(ABC_noPRCP_test.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p_WgU2fMYskz","executionInfo":{"status":"ok","timestamp":1725291952265,"user_tz":-330,"elapsed":577,"user":{"displayName":"JANE","userId":"04368026904399864163"}},"outputId":"d0697e1f-c840-4cc4-9e0e-27b49f803e0f"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["A_noPRCP:\n","          DATE  LATITUDE_A  LONGITUDE_A  ELEVATION_A     tmax_A     tmin_A  \\\n","43  1975-06-08      63.883       77.517          128  34.133117  21.242208   \n","147 1975-07-12      63.883       77.517          128  36.000000  25.000000   \n","160 1975-07-18      63.883       77.517          128  42.600000  21.000000   \n","152 1975-07-30      63.883       77.517          128  38.000000  22.000000   \n","151 1975-08-05      63.883       77.517          128  36.133117  23.242208   \n","\n","     Tavg_A  LONGITUDE  LATITUDE  ELEVATION  \n","43     27.5     78.733    63.933         63  \n","147    30.5     78.733    63.933         63  \n","160    31.8     78.733    63.933         63  \n","152    30.0     78.733    63.933         63  \n","151    29.5     78.733    63.933         63  \n","\n","B_noPRCP:\n","          DATE  LATITUDE_B  LONGITUDE_B  ELEVATION_B  tmax_b  tmin_b  Tavg_B  \\\n","43  1975-06-08       62.95      79.8167           66    31.2    12.5   21.85   \n","147 1975-07-12       62.95      79.8167           66    38.8    23.1   30.95   \n","160 1975-07-18       62.95      79.8167           66    38.6    17.7   28.15   \n","152 1975-07-30       62.95      79.8167           66    35.9    18.1   27.00   \n","151 1975-08-05       62.95      79.8167           66    35.1    18.1   26.60   \n","\n","     LONGITUDE  LATITUDE  ELEVATION  \n","43      78.733    63.933         63  \n","147     78.733    63.933         63  \n","160     78.733    63.933         63  \n","152     78.733    63.933         63  \n","151     78.733    63.933         63  \n","\n","C_noPRCP:\n","          DATE  LATITUDE_C  LONGITUDE_C  ELEVATION_C     tmax_c     tmin_c  \\\n","43  1975-06-08      63.083       78.933           64  31.000000  15.000000   \n","147 1975-07-12      63.083       78.933           64  36.000000  24.000000   \n","160 1975-07-18      63.083       78.933           64  31.600000  17.000000   \n","152 1975-07-30      63.083       78.933           64  31.600000  17.000000   \n","151 1975-08-05      63.083       78.933           64  35.697674  21.776744   \n","\n","     Tavg_C  LONGITUDE  LATITUDE  ELEVATION  \n","43     23.0     78.733    63.933         63  \n","147    30.0     78.733    63.933         63  \n","160    24.3     78.733    63.933         63  \n","152    24.3     78.733    63.933         63  \n","151    28.4     78.733    63.933         63  \n","\n","AC_noPRCP:\n","          DATE  LATITUDE_A  LONGITUDE_A  ELEVATION_A  SNWD_A     tmax_A  \\\n","43  1975-06-08      63.883       77.517          128    0.00  34.133117   \n","147 1975-07-12      63.883       77.517          128    2.46  36.000000   \n","160 1975-07-18      63.883       77.517          128    0.00  42.600000   \n","152 1975-07-30      63.883       77.517          128    0.00  38.000000   \n","151 1975-08-05      63.883       77.517          128    0.00  36.133117   \n","\n","        tmin_A  Tavg_A  LATITUDE_C  LONGITUDE_C  ELEVATION_C     tmax_c  \\\n","43   21.242208    27.5      63.083       78.933           64  31.000000   \n","147  25.000000    30.5      63.083       78.933           64  36.000000   \n","160  21.000000    31.8      63.083       78.933           64  31.600000   \n","152  22.000000    30.0      63.083       78.933           64  31.600000   \n","151  23.242208    29.5      63.083       78.933           64  35.697674   \n","\n","        tmin_c  Tavg_C  LONGITUDE  LATITUDE  ELEVATION  \n","43   15.000000    23.0     78.733    63.933         63  \n","147  24.000000    30.0     78.733    63.933         63  \n","160  17.000000    24.3     78.733    63.933         63  \n","152  17.000000    24.3     78.733    63.933         63  \n","151  21.776744    28.4     78.733    63.933         63  \n","\n","BC_noPRCP:\n","          DATE  LATITUDE_B  LONGITUDE_B  ELEVATION_B  tmax_b  tmin_b  Tavg_B  \\\n","43  1975-06-08       62.95      79.8167           66    31.2    12.5   21.85   \n","147 1975-07-12       62.95      79.8167           66    38.8    23.1   30.95   \n","160 1975-07-18       62.95      79.8167           66    38.6    17.7   28.15   \n","152 1975-07-30       62.95      79.8167           66    35.9    18.1   27.00   \n","151 1975-08-05       62.95      79.8167           66    35.1    18.1   26.60   \n","\n","     LATITUDE_C  LONGITUDE_C  ELEVATION_C     tmax_c     tmin_c  Tavg_C  \\\n","43       63.083       78.933           64  31.000000  15.000000    23.0   \n","147      63.083       78.933           64  36.000000  24.000000    30.0   \n","160      63.083       78.933           64  31.600000  17.000000    24.3   \n","152      63.083       78.933           64  31.600000  17.000000    24.3   \n","151      63.083       78.933           64  35.697674  21.776744    28.4   \n","\n","     LONGITUDE  LATITUDE  ELEVATION  \n","43      78.733    63.933         63  \n","147     78.733    63.933         63  \n","160     78.733    63.933         63  \n","152     78.733    63.933         63  \n","151     78.733    63.933         63  \n","\n","AB_noPRCP:\n","          DATE  LATITUDE_A  LONGITUDE_A  ELEVATION_A     tmax_A     tmin_A  \\\n","43  1975-06-08      63.883       77.517          128  34.133117  21.242208   \n","147 1975-07-12      63.883       77.517          128  36.000000  25.000000   \n","160 1975-07-18      63.883       77.517          128  42.600000  21.000000   \n","152 1975-07-30      63.883       77.517          128  38.000000  22.000000   \n","151 1975-08-05      63.883       77.517          128  36.133117  23.242208   \n","\n","     Tavg_A  LATITUDE_B  LONGITUDE_B  ELEVATION_B  tmax_b  tmin_b  Tavg_B  \\\n","43     27.5       62.95      79.8167           66    31.2    12.5   21.85   \n","147    30.5       62.95      79.8167           66    38.8    23.1   30.95   \n","160    31.8       62.95      79.8167           66    38.6    17.7   28.15   \n","152    30.0       62.95      79.8167           66    35.9    18.1   27.00   \n","151    29.5       62.95      79.8167           66    35.1    18.1   26.60   \n","\n","     LONGITUDE  LATITUDE  ELEVATION  \n","43      78.733    63.933         63  \n","147     78.733    63.933         63  \n","160     78.733    63.933         63  \n","152     78.733    63.933         63  \n","151     78.733    63.933         63  \n","\n","ABC_noPRCP:\n","          DATE  LATITUDE_A  LONGITUDE_A  ELEVATION_A     tmax_A     tmin_A  \\\n","43  1975-06-08      63.883       77.517          128  34.133117  21.242208   \n","147 1975-07-12      63.883       77.517          128  36.000000  25.000000   \n","160 1975-07-18      63.883       77.517          128  42.600000  21.000000   \n","152 1975-07-30      63.883       77.517          128  38.000000  22.000000   \n","151 1975-08-05      63.883       77.517          128  36.133117  23.242208   \n","\n","     Tavg_A  LATITUDE_B  LONGITUDE_B  ELEVATION_B  ...  Tavg_B  LATITUDE_C  \\\n","43     27.5       62.95      79.8167           66  ...   21.85      63.083   \n","147    30.5       62.95      79.8167           66  ...   30.95      63.083   \n","160    31.8       62.95      79.8167           66  ...   28.15      63.083   \n","152    30.0       62.95      79.8167           66  ...   27.00      63.083   \n","151    29.5       62.95      79.8167           66  ...   26.60      63.083   \n","\n","     LONGITUDE_C  ELEVATION_C     tmax_c     tmin_c  Tavg_C  LONGITUDE  \\\n","43        78.933           64  31.000000  15.000000    23.0     78.733   \n","147       78.933           64  36.000000  24.000000    30.0     78.733   \n","160       78.933           64  31.600000  17.000000    24.3     78.733   \n","152       78.933           64  31.600000  17.000000    24.3     78.733   \n","151       78.933           64  35.697674  21.776744    28.4     78.733   \n","\n","     LATITUDE  ELEVATION  \n","43     63.933         63  \n","147    63.933         63  \n","160    63.933         63  \n","152    63.933         63  \n","151    63.933         63  \n","\n","[5 rows x 22 columns]\n"]}]},{"cell_type":"code","source":["# Save each DataFrame as a CSV file in the specified folder with _test suffix\n","A_withPRCP_test.to_csv('/content/drive/MyDrive/AI ML IITM saasthra/A_withPRCP_test.csv', index=False)\n","B_withPRCP_test.to_csv('/content/drive/MyDrive/AI ML IITM saasthra/B_withPRCP_test.csv', index=False)\n","C_withPRCP_test.to_csv('/content/drive/MyDrive/AI ML IITM saasthra/C_withPRCP_test.csv', index=False)\n","AC_withPRCP_test.to_csv('/content/drive/MyDrive/AI ML IITM saasthra/AC_withPRCP_test.csv', index=False)\n","BC_withPRCP_test.to_csv('/content/drive/MyDrive/AI ML IITM saasthra/BC_withPRCP_test.csv', index=False)\n","AB_withPRCP_test.to_csv('/content/drive/MyDrive/AI ML IITM saasthra/AB_withPRCP_test.csv', index=False)\n","ABC_withPRCP_test.to_csv('/content/drive/MyDrive/AI ML IITM saasthra/ABC_withPRCP_test.csv', index=False)\n"],"metadata":{"id":"8jcnHY24Y-yL","executionInfo":{"status":"ok","timestamp":1725292038196,"user_tz":-330,"elapsed":529,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["# Save each updated DataFrame as a CSV file in the specified folder with _test suffix\n","A_noPRCP_test.to_csv('/content/drive/MyDrive/AI ML IITM saasthra/A_noPRCP_test.csv', index=False)\n","B_noPRCP_test.to_csv('/content/drive/MyDrive/AI ML IITM saasthra/B_noPRCP_test.csv', index=False)\n","C_noPRCP_test.to_csv('/content/drive/MyDrive/AI ML IITM saasthra/C_noPRCP_test.csv', index=False)\n","AC_noPRCP_test.to_csv('/content/drive/MyDrive/AI ML IITM saasthra/AC_noPRCP_test.csv', index=False)\n","BC_noPRCP_test.to_csv('/content/drive/MyDrive/AI ML IITM saasthra/BC_noPRCP_test.csv', index=False)\n","AB_noPRCP_test.to_csv('/content/drive/MyDrive/AI ML IITM saasthra/AB_noPRCP_test.csv', index=False)\n","ABC_noPRCP_test.to_csv('/content/drive/MyDrive/AI ML IITM saasthra/ABC_noPRCP_test.csv', index=False)"],"metadata":{"id":"bRkAGwlaZDwq","executionInfo":{"status":"ok","timestamp":1725292085435,"user_tz":-330,"elapsed":529,"user":{"displayName":"JANE","userId":"04368026904399864163"}}},"execution_count":36,"outputs":[]}]}